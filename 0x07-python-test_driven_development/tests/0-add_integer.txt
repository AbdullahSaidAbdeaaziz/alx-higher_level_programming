===========================
How to use 0-add_integer.py
===========================

this module have only function ``add_integer()``

Numbers
=======

``add_integer()`` returns sum of its arguments. For numbers,
that value is equivalent to using the a, b operator.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(1, 3)
    4

It also works with one parameter where second parameter 98 in default.

::

    >>> add_integer(1)
    99

It also works with float-point numbers

::

    >>> add_integer(1.0, 2.0)
    3

::

    >>> add_integer(1.5, 2.5)
    3

::

    >>> add_integer(1.2)
    99

::

    >>> add_integer(1, -2)
    -1

::

    >>> add_integer(-1)
    97

Adding infinity

::

    >>> add_integer(1, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

Adding NAN

:: 
    >>> add_integer(1, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer


Non-Numbers
===========

As a, b is also defined on other data types.
Like bool, str, tuple...etc in ``add_integer()``

::

    >>> add_integer(1, 'a')
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer('a')
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(1, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

It also can be string numbers

::
    >>> add_integer('2')
    Traceback (most recent call last):
    TypeError: a must be an integer


